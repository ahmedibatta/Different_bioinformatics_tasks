# -*- coding: utf-8 -*-
"""Tasks_Pyhon_script.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y-SD7BZk5IhmpLflOfrAqTS8zsjSsAVE
"""

# install Pandas
pip install pandas

# import important packages
import pandas as pd

# Path to the gene information file
gene_info_file_path = "/Homo_sapiens.gene_info.gz"

# Read the tab  delimiter  file witin the type of the compression (gzip)
gene_info_df = pd.read_csv(gene_info_file_path, sep='\t', compression='gzip')

# get the required columns for the investigation
gene_info_df = gene_info_df[["GeneID","Symbol","Synonyms"]]

# separate items in the Synonyms columns to a list
gene_info_df["Synonyms"] = gene_info_df["Synonyms"].str.split("|")


# separate items in the Synonyms columns to new rows with same GeneID
gene_info_df = gene_info_df.explode('Synonyms')

# mapping the Symbol and GeneID columns
map_symbol = dict(zip(gene_info_df.Symbol, gene_info_df.GeneID))

# mapping the Synonyms and GeneID columns
map_synonyms = dict(zip(gene_info_df.Synonyms, gene_info_df.GeneID))

# concatonate betwwn two dictionaries
map_symbol_synonyms = {}
map_symbol_synonyms.update(map_synonyms)
map_symbol_synonyms.update(map_symbol)


def get_geneid(gene_name, gene_dict):

    """
    Function to get the geneID from the name of the gene (symbol or synonym)
    using a dictionary.

    Input:
       gene_name (str): The name of the gene to retrieve the geneID.
       gene_dict (dict): The dictionary containing genes as keys and
                          their corresponding geneIDs as values.

    Output:
    geneid (str or None): The geneID corresponding to the gene_name, or Gene not found
    if the gene_name is not found in the dictionary.
    """

    geneid = gene_dict.get(gene_name)
    return geneid


# Path to the gmt file
gmt_file_path = "/h.all.v2023.1.Hs.symbols.gmt"

pathways_list = []

# read the file line by line
with open(gmt_file_path, 'r') as file:
    for line in file:
        pathway_info = line.strip().split('\t')

        # Separate the pathway information for each row
        pathway_name = pathway_info[0]
        pathway_description = pathway_info[1]
        gene_names = pathway_info[2:]  # All subsequent values are gene names

        # Append the each pathway info to the list
        pathways_list.append([pathway_name, pathway_description] + gene_names)

# Create the DataFrame from the list of pathway_data_list
columns = ['Pathway Name', 'Pathway Description'] + [f'Gene_{i}' for i in range(1, len(pathways_list[0]) - 1)]
pathways_df = pd.DataFrame(pathways_list, columns=columns)


# Replace the gene names with (Gene ID) Entrez ID from Task 1
# apply the get_geneid function to replace the gene names with their ID

pathways_df.iloc[:, 2:] = pathways_df.iloc[:, 2:].applymap(
                                          lambda x: get_geneid(x, map_symbol_synonyms)).fillna('')

# Save the output to new gmt file

output_file = 'output_file.gmt'
pathways_df.to_csv(output_file, sep='\t', index=False, header=False)

